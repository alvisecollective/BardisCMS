{"name":"BardisCMS","tagline":"BardisCMS is a Symfony2 (v.2.4.4) distribution with integrated Zurb  Foundation 5 (Bower and Grunt with custom builds included for better workflow) for front end and all the major bundles pre-configured (Sonata Admin, User, Media, FOSUser, KnpMenu, Guzzle) combined with extra bundles to provide a fully functional out of the box CMS for websites","body":"[![Build Status](https://travis-ci.org/bardius/BardisCMS.svg?branch=master)](https://travis-ci.org/bardius/BardisCMS)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/535c8e24fe0d073b48000126/badge.png)](https://www.versioneye.com/user/projects/535c8e24fe0d073b48000126)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/535c8e18fe0d073b4800011c/badge.png)](https://www.versioneye.com/user/projects/535c8e18fe0d073b4800011c)\r\n[![Latest Stable Version](https://poser.pugx.org/bardis/cms-symfony2/v/stable.png)](https://packagist.org/packages/bardis/cms-symfony2) \r\n[![Total Downloads](https://poser.pugx.org/bardis/cms-symfony2/downloads.png)](https://packagist.org/packages/bardis/cms-symfony2) \r\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\r\n[![License](https://poser.pugx.org/bardis/cms-symfony2/license.png)](https://packagist.org/packages/bardis/cms-symfony2)\r\n\r\n![](http://www.bardis.info/bardisCMS.png)\r\n\r\nSymfony2 (v.2.4.4) distribution with integrated Zurb Foundation 5 \r\n============================================================================\r\n\r\nBardisCMS is a Symfony2 (v.2.4.4) distribution with integrated Zurb Foundation 5 Framework.\r\n\r\nTravis CI, Bower and Grunt with custom builds are included for better workflow on front end.\r\n\r\nAll the major bundles are pre-configured (Sonata Admin, Sonata User, Sonata Media, FOSUser, KnpMenu, Guzzle) combined with my own bundles (Page, Settings, ContentBlocks, Blog, Comments, Tags, Categories) to provide a fully functional out of the box responsive CMS for websites with exceptional performance, usage of REST API's and caching abilities.\r\n\r\nA Skeleton Bundle is provided as part of the CMS so new content types/functionality that comply with the current architecture can easily be added.\r\n\r\nYou can browse the Git repository, that I update with big releases every couple of months or so, and use freely for your projects.\r\n\r\nYou can find the requirements for Symfony2 here http://symfony.com/doc/current/reference/requirements.html  \r\nYou can find the documentation for Symfony2 here http://symfony.com/doc/current/book/index.html  \r\nYou can find the documentation for Zurb Foundation 5 here http://foundation.zurb.com/docs/\r\n\r\nRequirements\r\n\r\n* [PHP](http://www.php.net) 5.3 or later\r\n* Installation via [Composer](http://getcomposer.org/)\r\n\r\n  \r\nThe CMS requires the existence of 3 pages to work. These are the homepage, the 404 page and the tagged page.  \r\n  \r\nSkeletonBundle is a fully structured bundle with simple functionalities (similar to normal pages) so it can be cloned to create new bundles for new content types.  \r\n  \r\n\r\nQuick Start\r\n------------------------------------------------------\r\n\r\nThe fastest way to get everything running is:\r\n\r\n\t\r\n\t1. git clone https://github.com/bardius/BardisCMS.git\r\n\t2. cd BardisCMS\r\n\t3. composer install\r\n\t4. create a database\r\n\t5. alter your app/config/parameters.yml with your db details\r\n\t6. npm install -g bower grunt-cli (if you have never installed them in past)\r\n\t7. npm install\r\n\t8. bower install\r\n\t9. bardisCMS-deploy.sh \r\n\t10. setup your vhost\r\n  \r\n\r\nDeployment / Local Installation\r\n------------------------------------------------------\r\n\r\nPlease follow the steps below for a complete new install.  \r\n\r\n1. You need to do a git clone of the git repo  \r\ngit clone\r\n\r\n2. Install composer  \r\nhttp://getcomposer.org/download/\r\n\r\n3. Install packagist (https://packagist.org)  \r\ncurl -s http://getcomposer.org/installer | php\r\n\r\n4. Setup your virtual host (see details in relevant section below).\r\n\r\n5. Setup a database and provide the details to the app/config/parameters.yml file (see details in relevant section below).  \r\nTip: Additionally in the same file you have to set the paths for sass, compass and java for each environment.\r\n\r\n6. Change the memory limit in your php.ini to 128M or more if required\r\n\r\n7. Set the intl PHP extension as enabled if not already (Symfony2 requirement)\r\n\r\n8. Run a composer install to get the vendor libraries files (composer update to get latest version)  \r\ncomposer.phar install\r\n\r\n9. Run the CLI symphony2 commands  \r\n\r\n\t* php app/console cache:clear [--env=prod]\r\n\t(to clear and warmup cache)\r\n\t* php app/console assets:install  \r\n\t(to generate the bundle assets)\r\n\t* php app/console doctrine:schema:create  \r\n\t(to create the database schema)\r\n\t* php app/console doctrine:fixtures:load  \r\n\t(to load required/sample data to database)\r\n\t* php app/console sonata:media:sync-thumbnails sonata.media.provider.image intro\r\n\t* php app/console sonata:media:sync-thumbnails sonata.media.provider.image bgimage\r\n\t(to generate the required by sample data images)\r\n\t* php app/console assetic:dump [--env=prod]\r\n\t(to generate the assets for the front end)\r\n\r\n \r\n### Front end Framework Setup ###\r\n\r\nDue to the use of the Zurb Foundation Framework 5 (version 5.2.2) the need for the following steps is unavoidable unless you do not need the framework at all. \r\n  \r\nWe need to install NodeJs, Node Packaged Modules, Ruby, compass, sass, foundation gems and GIT and bower dependency manager if they are not already installed to the system. \r\n  \r\nMore information can be found below at their official web sites:  \r\n  \r\n\thttp://git-scm.com/downloads\t\t\t\t(GIT)  \r\n\thttp://nodejs.org/\t\t\t\t\t(NodeJs)  \r\n\thttps://npmjs.org/\t\t\t\t\t(Node Packaged Modules)  \r\n\thttp://www.rubyinstaller.org/\t\t\t\t(Ruby)  \r\n\thttps://github.com/bower/bower\t\t\t\t(Bower)  \r\n\thttp://sass-lang.com/install\t\t\t\t(Sass)  \r\n\thttp://compass-style.org/install/\t\t\t(Compass)  \r\n\thttp://foundation.zurb.com/docs/sass.html\t\t(Foundation 5 - Sass based)  \r\n  \r\nThe command line steps are:  \r\n\t\r\n\t1. [sudo] npm install -g bower grunt-cli\r\n\t2. gem update --system\r\n\t3. gem install sass\r\n\t4. gem install compass\r\n\t5. gem install foundation\r\n\t6. [sudo] npm install\r\n\t7. bower install\r\n\t8. grunt deploy [watch]\r\n\r\nTip: In case you are behind a firewall and connection to git is refused force https for all git connections with running this in your bash git config --global url.\"https://\".insteadOf git://\r\n\r\n\tphp app/console assetic:dump  [--env=prod]\r\n  \r\nYour project should work now and you can see your front end working.  \r\nPlease Login to /admin/dashboard and alter your website settings and you are finally set to go.\r\n\r\n\r\nparameters.yml File example contents\r\n---------------------------------------------\r\n\r\nHere is a sample setup for your parameters file\r\n\r\n\tparameters:\r\n\r\n\t\tdatabase_driver:   pdo_mysql\r\n\t\tdatabase_host:     localhost\r\n\t\tdatabase_port:     ~\r\n\t\tdatabase_name:     dbname\r\n\t\tdatabase_user:     root\r\n\t\tdatabase_password: ~\r\n\r\n\t\tmailer_transport:  smtp\r\n\t\tmailer_host:       localhost\r\n\t\tmailer_user:       ~\r\n\t\tmailer_password:   ~\r\n\r\n\t\tlocale:            en\r\n\t\tsecret:            ThisTokenIsNotSoSecretChangeIt\r\n\r\n\t\tjavapath:          C:\\Program Files\\Java\\jre7\\bin       #usr/bin/java\r\n\t\tcompass.bin:       C:\\Program Files\\Ruby193\\bin\\compass #usr/bin/compass\r\n\t\tsass.bin:          C:\\Program Files\\Ruby193\\bin\\sass    #usr/bin/sass\r\n\r\n\t\tunix_socket:       ~ #for your db connection for mac users\r\n\r\n\r\n\r\nVirtual Host Settings\r\n---------------------------------------------\r\n\r\nHere is a sample setup for your virtual host configuration\r\n\r\n\t<VirtualHost *:80>\r\n\r\n\t\tDocumentRoot \"c:/wamp/www/domainname/web\"\r\n\t\tServerName domainname.prod\r\n\t\tServerAlias domainname.test\r\n\t\tServerAlias domainname.dev\r\n\r\n\t\t# set some environment variables depending on host\r\n\t\tSetEnvIfNoCase Host domainname\\.prod domainname_env=prod\r\n\t\tSetEnvIfNoCase Host domainname\\.dev domainname_env=dev\r\n\t\tSetEnvIfNoCase Host domainname\\.test domainname_env=test\r\n\r\n\t\t<Directory c:/wamp/www/domainname/web>\r\n\r\n\t\t\tRewriteEngine On\r\n\r\n\t\t\t# use the environment variables above to select correct \r\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-f\r\n\t\t\tRewriteCond %{ENV:domainname_env} test\r\n\t\t\tRewriteRule ^(.*)$ app_test.php [QSA,L]\r\n\r\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-f\r\n\t\t\tRewriteCond %{ENV:domainname_env} dev\r\n\t\t\tRewriteRule ^(.*)$ app_dev.php [QSA,L]\r\n\r\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-f\r\n\t\t\tRewriteCond %{ENV:domainname_env} prod\r\n\t\t\tRewriteRule ^(.*)$ app.php [QSA,L]\r\n\r\n\t\t\tOptions +Indexes\r\n\t\t\tOrder Allow,Deny\r\n\t\t\tAllow from all\r\n\t\t\tAllowOverride All\r\n\r\n\t\t</Directory>\r\n\r\n\t</VirtualHost>\r\n\r\n\r\nUpdating to the ci server and the live server\r\n-------------------------------------------------------------------------\r\n\r\nThis can be done with simple steps in your SSH CLI\r\n\r\n\tgit pull\r\n\tphp app/console cache:clear\r\n\tphp doctrine:schema:update --force\r\n\tphp app/console assetic dump\r\n\r\n\r\nFor the production server the process is the same but you should use\r\n\r\n\tphp app/console cache:clear --env=prod\r\n\tphp app/console assetic:dump --env=prod\r\n\r\n\r\n\r\nKnown Bugs / Issues / Extra Configuration\r\n---------------------------------------------\r\n\r\nIf you run mac OS with mamp remember to set properly your php date.timezone settings\r\n(http://stackoverflow.com/questions/6194003/timezone-with-symfony-2)\r\n\r\nYou should find your php.ini  in /private/etc if it exists, otherwise:\r\n\r\n\tsudo cp /private/etc/php.ini.default /private/etc/php.ini\r\n\r\nEdit /private/etc/php.ini and set date.timezone.\r\n\r\n\r\nSkeleton Bundle Use instructions\r\n-----------------------------------------------\r\nThe skeleton bundle is now ready to be used as base for the creation of new content bundles.\r\n\r\nThe process for this is to:\r\n\r\n\t01. Copy the SkeletonBundle folder and rename it properly (e.g. ProductsBundle)\r\n\t02. Edit the admin class file with the correct names for fields and variables.\r\n\t03. Edit the Controller files with correct namespaces and variable names\r\n\t04. Change the Dependency Injection configuration and extension to fit your bundle\r\n\t05. Edit the Entity file to fit your database needs\r\n\t06. Edit the repository file to suit your needs\r\n\t07. Change the bundles routing file to provide the required functional urls\r\n\t08. Alter the views\r\n\t09. Add the requested configuration values to the config.yml\r\n\t10. Add the bundle to the registered bundles list in AppKernel.php\r\n\t11. Clear cache\r\n\t12. Add the a service for the new bundle admin and add it to the sonata admin config\r\n\t13. Include the bundle routing file to the app routing\r\n\t14. Edit the menu entity so you can add menu items for that bundle\r\n\t15. Edit the tag entity so you can add menu items for that bundle\r\n\t16. Edit the category entity so you can add menu items for that bundle\r\n\t17. Edit the contentblocks entity so you can add menu items for that bundle\r\n\t18. Edit the AddMenuTypeFieldSubscriber to be able to create menu items for that bundle\r\n\t19. Edit the MenuBuilder to add the case for the link generation of your bundle\r\n\t20. doctrine:schema:update --force\r\n\t21. Create an Page in that bundle to display the filtered results with alias tagged\r\n\r\nYour new bundle should now work.\r\n(prequisites are the PageBundle, SettingsBundle and MenuBundle)\r\n\r\n\r\n\r\nIncluded Bundles List\r\n------------------------------------------------------\r\n\r\n\t1. FOSUserBundle (https://github.com/FriendsOfSymfony/FOSUserBundle)\r\n\t2. SonataBlockBundle (http://sonata-project.org/bundles/block/master/doc/index.html)\r\n\t3. SonataUserBundle (http://sonata-project.org/bundles/user/master/doc/index.html)\r\n\t4. SonataMediaBundle (http://sonata-project.org/bundles/media/master/doc/index.html)\r\n\t5. SonataAdminBundle (http://sonata-project.org/bundles/admin/master/doc/index.html)\r\n\t6. SonataTimelineBundle (http://sonata-project.org/bundles/timeline/master/doc/index.html)\r\n\t7. KnpMenu (http://knpbundles.com/KnpLabs/KnpMenuBundle)\r\n\t8. Guzzle (https://github.com/misd-service-development/guzzle-bundle)\r\n\t9. StFalcon TinymceBundle (http://knpbundles.com/stfalcon/TinymceBundle)\r\n\r\n\r\n\r\n\r\nUseful Links and Documentation\r\n----------------------------------------------\r\n\r\nSymfony2 Documentation\r\n\r\nhttp://symfony.com/doc/current/index.html \r\n\r\nDoctrine2 ORM Documentation\r\n\r\nhttp://docs.doctrine-project.org/projects/doctrine-orm/en/latest/index.html\r\n\r\nSymfony2 Cheatsheet\r\n\r\nhttp://www.symfony2cheatsheet.com/\r\n\r\nWebsite with listing of available Symfony2 Bundles\r\n\r\nhttp://knpbundles.com/\r\n\r\nTutorial on how to build a Blog in Symfony2\r\n\r\nhttp://tutorial.symblog.co.uk/\r\n\r\nLinks to Front end Frameworks (Zurb and Boostrap)\r\n\r\nhttp://bootstrap.braincrafted.com/\r\nhttp://foundation.zurb.com/\r\n\r\nNodeJs, Node Packaged Modules, Ruby, compass, sass, foundation gems and GIT and bower dependency manager\r\n\r\nhttp://git-scm.com/downloads\t\t\t\t(GIT)\r\n\r\nhttp://nodejs.org/\t\t\t\t\t(NodeJs)\r\n\r\nhttps://npmjs.org/\t\t\t\t\t(Node Packaged Modules)\r\n\r\nhttp://www.rubyinstaller.org/\t\t\t\t(Ruby)\r\n\r\nhttps://github.com/bower/bower\t\t\t\t(Bower)\r\n\r\nhttp://sass-lang.com/install\t\t\t\t(Sass)\r\n\r\nhttp://compass-style.org/install/\t\t\t(Compass)\r\n\r\nhttp://foundation.zurb.com/docs/sass.html\t\t(Foundation 5 - Sass based)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}